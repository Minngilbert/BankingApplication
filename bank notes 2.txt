//8/20/20 additions
CLASSES

Class Employee implement serializable
Class Account implement serializable
Class Customer implement serializable
Class Administrator extends employee
Class Transaction

Interface AccountManipulator
i:withdraw(Account, Amount)
i:transfer(Account, Account, Amount)
i:deposit(Account, Amount)

Administrator Actions
approveAccount(Account)
withdraw(Account, amount) - i
transfer(Account, Account,  amount) - i
deposit(Account, amount) - i
cancelAccount(Account)
updateAccount(Account)

Customer Actions
registerForAccount returns Account
viewAccount(accountNumber)
deposit(Account, amount) - i
withdraw(Account, amount) - i
transfer(Account, Account, amount) - i


Employee Actions
viewAccount(Customer C)
viewAccountBalance(Customer, Account)
viewPersonalInformation(Customer C)
denyAccount(Account A)
updateAccount(Account)

Transaction Actions
commitTransaction

//8/21/20 additions
Class Account

members
private static int accountGenerator
double balance
int id
Customer owner
boolean pendingApproval


Account Actions

public static int generateAccountNumber

Constructor -> id=accountGenerator++;

getOwner
getId
getBalance
//redacted - shouldn't be changed on creation/approval setOwner
//redacted - shouldn't be changed on creation/approval setId
setBalance

Class JointAccount extends Account
Customer ownerA
Customer ownerB



/* just for demonstration on queuing accounts
for(Account acct : AccountList) {
	if acct.pendingApproval - retList.add(acct)
	return retList
}*/

Class FileHandler
Actions
getUserAccounts
getEmployees
getAdministrators
readEmployees
readAccounts
readCustomers
writeEmployees
writeAccounts
writeCustomers
getEmployeeFile
getCustomerFile
getAccountFile

FileHandler members



File employees
File accounts
File customers